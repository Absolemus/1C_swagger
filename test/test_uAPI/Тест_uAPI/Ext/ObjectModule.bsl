#Область ПрограммныйИнтерфейс
Функция СведенияОВнешнейОбработке() Экспорт		
	Возврат ОписаниеСервиса().СведенияОВнешнейОбработке;
КонецФункции 

Функция ОписаниеСервиса() Экспорт
	ОписаниеСервиса = ДанныеСервиса.Инициализация()
		.Имя("Test Swagger")
		.Описание("", ПолноеОписаниеСервиса())
		.Префикс("test/v1")
		.Версия("1.0")
		.Контакт("Авдеев Никита (NAvdeyev)", "", "navdeyev@kpmg.kz")
		.Тэг("Простой", "Самый простой сервис")
		.Тэг("Продвинутый", "Один сервис с двумя методами и параметрами")
		.Тэг("Сложный", "Сложный сервис с параметрами и разными схемами")
		.Сервер("localhost", "Сервер для разработки")
			.ИменаПользователейСервера("Guets;Test;Админ")
				.ИмяПоУмолчанию("Админ")
			.ПортыСервера("443;8443;80")
				.ПортПоУмолчанию("80")
		.Сервис("Ping")
			.Операция(Перечисления.ВидыМетодовHTTPЗапроса.GET, "Пинг", "Сервис вернет <u>**текущую**</u> универсальную дату", "Простой")
				.Ответ("200", "Сервис успешно обработал запрос и вернул ответ")
				.СхемаОтвета("text/plain", Новый Структура("type, example", "integer", "123 456 789"))
				.ОтветПоУмолчанию("Любые необработанные исключения")
				.СхемаОтвета("text/plain", Новый Структура("type, example", "string", "Сервер недоступен"))
		.Сервис("HelloWorld")
			.Операция(Перечисления.ВидыМетодовHTTPЗапроса.GET, "Привет Мир", "Метод вернет приветственое сообщение человеку, имя которого передано параметром", "Продвинутый")
				.Параметр("name", Перечисления.МестоЛокацииПараметра.Шаблон, Новый Структура("type", "string"))
				.Ответ("200", "Сервис успешно поздоровался с человеком")
				.СхемаОтвета("text/plain", Новый Структура("type, example", "string", "Привет, Юзернейм из шалблона!"))
			.Операция(Перечисления.ВидыМетодовHTTPЗапроса.POST, "Привет Мир", "Метод вернет приветственое сообщение человеку, имя которого передано в теле запроса", "Продвинутый")
				.Запрос("Имя конкретного человека", Истина)
				.СхемаЗапроса("application/json", СхемаИмя())
				.Ответ("200", "Сервис успешно поздоровался с человеком")
				.СхемаОтвета("text/plain", Новый Структура("type, example", "string", "Привет, Юзернейм из тела запроса!"))
		.Сервис("weather")
			.Операция(Перечисления.ВидыМетодовHTTPЗапроса.GET, "Прогноз погоды", "Метод возвращает погоду, которую мы ему скажем", "Сложный")
				.Запрос("Надо передать город, погоду и дату", Истина)
				.СхемаЗапроса("application/json", СхемаПогодаЗапрос())
				.СхемаЗапроса("application/xml", СхемаПогодаЗапрос(Истина))
				.Ответ("200", "Запрос успешно обработан")
				.СхемаОтвета("application/json", СхемаПогода())
				.СхемаОтвета("application/x-yml", СхемаПогода())
				.СхемаОтвета("application/xml", СхемаПогода(Истина))  
				.Ответ("455", "Город не найден")
				.Ответ("530", "Погоды на указанную дату нет")
		.Создать();
		
	Возврат ОписаниеСервиса;
КонецФункции 
#КонецОбласти

#Область СлужебныйПрограмныйИнтерфейс
Функция ВыполнитьКоманду(Идентификатор, ПараметрыВыполнения) Экспорт
	Если Идентификатор = "/HelloWorld" Тогда
		Возврат ПриветМир(ПараметрыВыполнения);
	ИначеЕсли Идентификатор = "/Ping" Тогда
		Возврат Пинг(ПараметрыВыполнения);	
	КонецЕсли;	
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция ПолноеОписаниеСервиса()
	Возврат "# Это тестовый сервис для демонстации возможностей uAPI
		|
		|Расширение можно скачать на странице проекта в [гитхаб](https://github.com)
		|
		|Реализована возможность описания тела запроса, тела ответа, параметров и сервера"	
КонецФункции

Функция Пинг(ПараметрыВыполнения) 
	HTTPОтвет = Новый HTTPСервисОтвет(200);
	HTTPОтвет.УстановитьТелоИзСтроки(ТекущаяУниверсальнаяДатаВМиллисекундах()); 
	Возврат HTTPОтвет;			
КонецФункции
 
Функция ПриветМир(ПараметрыВыполнения)
	HTTPОтвет = Новый HTTPСервисОтвет(200);
	Шаблон = "Привет, %1!";     
	Запрос = ПараметрыВыполнения.HTTPЗапрос;
    Параметры = Запрос.ПараметрыURL;
	Если ПараметрыВыполнения.Метод = "GET" Тогда
		Тело = СтрШаблон(Шаблон, Параметры["name"]);
	ИначеЕсли ПараметрыВыполнения.Метод = "POST" Тогда 
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(ТелоЗапроса);
		XDTOОбъект = ФабрикаXDTO.ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		Тело = СтрШаблон(Шаблон, XDTOОбъект.name);
	Иначе
		HTTPОтвет = Новый HTTPСервисОтвет(404);
		Тело = "Нет обработчика запрашиваемого метода";
	КонецЕсли;

	HTTPОтвет.УстановитьТелоИзСтроки(Тело);
	Возврат HTTPОтвет;			
КонецФункции

Функция Погода(ПараметрыВыполнения) Экспорт
	HTTPОтвет = Новый HTTPСервисОтвет(200);
	СтруктураОтвета = Новый Структура("City, Weather", "Almaty", "+21");
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, СтруктураОтвета);
	Ответ = Запись.Закрыть();
	
	HTTPОтвет.УстановитьТелоИзСтроки(Ответ);
	Возврат HTTPОтвет;
КонецФункции

Функция СхемаИмя()
	Схема = Новый Соответствие;
	Схема.Вставить("type", "object");
	Схема.Вставить("properties", Новый Соответствие);
	Схема["properties"].Вставить("name", Новый Соответствие);
	Схема["properties"]["name"].Вставить("type", "string");
	Схема.Вставить("required", Новый Массив);
	Схема["required"].Добавить("name");

	Возврат Схема;
КонецФункции

Функция СхемаПогодаЗапрос(ЭтоЗапросXML = Ложь)
	Схема = Новый Соответствие;
	Схема.Вставить("type", "object");
	Схема.Вставить("properties", Новый Соответствие);
	Схема["properties"].Вставить("City", Новый Соответствие);
	Схема["properties"]["City"].Вставить("type", "string");
	Схема["properties"].Вставить("Date", Новый Соответствие);
	Схема["properties"]["Date"].Вставить("type", "date");
	Схема.Вставить("example", Новый Структура("City, Date", "Almaty", Формат(Дата(2024, 07, 01), "ДФ=гггг-ММ-дд")));
	Если ЭтоЗапросXML Тогда
		Схема.Вставить("xml", Новый Структура("name, wrapped", "Weather", Истина));
	КонецЕсли;
	
	Возврат Схема;
КонецФункции

Функция СхемаПогода(ЭтоЗапросXML = Ложь)
	Схема = Новый Соответствие;
	Схема.Вставить("type", "object");
	Схема.Вставить("properties", Новый Соответствие);
	Схема["properties"].Вставить("City", Новый Соответствие);
	Схема["properties"]["City"].Вставить("type", "string");
	Схема["properties"].Вставить("Weather", Новый Соответствие);
	Схема["properties"]["Weather"].Вставить("type", "string");
	Схема["properties"].Вставить("Date", Новый Соответствие);
	Схема["properties"]["Date"].Вставить("type", "date");
	Схема.Вставить("required", Новый Массив);
	Схема["required"].Добавить("City");
	Схема["required"].Добавить("Weather");
	Схема["required"].Добавить("Date");
	Схема.Вставить("example", Новый Структура("City, Weather, Date", "Almaty", "+21", Формат(Дата(2024, 07, 01), "ДФ=гггг-ММ-дд")));
	Если ЭтоЗапросXML Тогда
		Схема.Вставить("xml", Новый Структура("name, wrapped", "Weather", Истина));
	КонецЕсли;

	Возврат Схема;
КонецФункции
#КонецОбласти