#Область Переменные
// Переменная содержит описание сервиса по стандарту OpenAPI
// и структуру описания СведенияОВнешнейОбработке
// До вызова метода Создать() является типом ОбработкаОбъект.ДанныеСервиса
// после вызова метода Создать() становится структурой с полями 
// СведенияОВнешнейОбработке и ОписаниеСервиса 
Перем Сервис;
// ПеречислениеСсылка.ВидыМетодовHTTPЗапроса содержит значения методов HTTP запроса
Перем ВидыЗапросов;
#КонецОбласти

#Область ПрограммныйИнтерфейс
Функция СведенияОВнешнейОбработке() Экспорт		
	Возврат ОписаниеСервиса().СведенияОВнешнейОбработке;
КонецФункции 

Функция ОписаниеСервиса() Экспорт
	ВидыЗапросов = Перечисления.ВидыМетодовHTTPЗапроса;
	Сервис = ДанныеСервиса.Инициализация()
		.Имя("Test Swagger")
		.Описание("", ПолноеОписаниеСервиса())
		.Префикс("test/v1")
		.Версия("1.0")
		.Контакт("Авдеев Никита (NAvdeyev)", "", "navdeyev@kpmg.kz")
		.Тег("Простой", "Самый простой сервис")
		.Тег("Продвинутый", "Один сервис с двумя методами и параметрами")
		.Тег("Сложный", "Сложный сервис с параметрами и разными схемами");

	ОписаниеМетодаПинг();
	ОписаниеМетодаПриветМир();
	ОписаниеМетодаПогода();

	ОписаниеСервиса = Сервис.Создать();
		
	Возврат ОписаниеСервиса;
КонецФункции 
#КонецОбласти

#Область СлужебныйПрограмныйИнтерфейс
Функция ВыполнитьКоманду(Идентификатор, ПараметрыВыполнения) Экспорт
	Если Идентификатор = "/HelloWorld" Тогда
		Возврат ПриветМир(ПараметрыВыполнения);
	ИначеЕсли Идентификатор = "/Ping" Тогда
		Возврат Пинг(ПараметрыВыполнения);
	Иначе
		ВызватьИсключение "Неизвестный метод";	
	КонецЕсли;	
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
#Область МетодыСервиса
Функция Пинг(ПараметрыВыполнения) 
	HTTPОтвет = Новый HTTPСервисОтвет(200);
	HTTPОтвет.УстановитьТелоИзСтроки(ТекущаяУниверсальнаяДатаВМиллисекундах()); 
	Возврат HTTPОтвет;			
КонецФункции
 
Функция ПриветМир(ПараметрыВыполнения)
	HTTPОтвет = Новый HTTPСервисОтвет(200);
	Шаблон = "Привет, %1!";     
	Запрос = ПараметрыВыполнения.HTTPЗапрос;
    Параметры = Запрос.ПараметрыURL;
	Если ПараметрыВыполнения.Метод = "GET" Тогда
		Тело = СтрШаблон(Шаблон, Параметры["name"]);
	ИначеЕсли ПараметрыВыполнения.Метод = "POST" Тогда 
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(ТелоЗапроса);
		XDTOОбъект = ФабрикаXDTO.ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		Тело = СтрШаблон(Шаблон, XDTOОбъект.name);
	Иначе
		HTTPОтвет = Новый HTTPСервисОтвет(404);
		Тело = "Нет обработчика запрашиваемого метода";
	КонецЕсли;

	HTTPОтвет.УстановитьТелоИзСтроки(Тело);
	Возврат HTTPОтвет;			
КонецФункции

Функция Погода(ПараметрыВыполнения) Экспорт
	HTTPОтвет = Новый HTTPСервисОтвет(200);
	СтруктураОтвета = Новый Структура("City, Weather", "Almaty", "+21");
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, СтруктураОтвета);
	Ответ = Запись.Закрыть();
	
	HTTPОтвет.УстановитьТелоИзСтроки(Ответ);
	Возврат HTTPОтвет;
КонецФункции

#КонецОбласти

#Область ОписаниеМетода
Процедура ОписаниеМетодаПинг()
	ОписаниеМетода = "Пинг";
	ПолноеОписаниеМетода = "Сервис вернет <u>**текущую**</u> универсальную дату";

	СхемаОтвета200 = ДанныеСервиса.НоваяСхема()
		.ТипЧисло()
		.ПростойПример("123 456 789")
		.Создать();

	СхемаОтветаПоУмолчанию = ДанныеСервиса.НоваяСхема()
		.ТипСтрока()
		.ПростойПример("Сервер недоступен")
		.Создать();

	Сервис
		.Сервис("Ping")
		.Операция(ВидыЗапросов.GET, ОписаниеМетода, ПолноеОписаниеМетода, "Простой")
			.Ответ("200", "Сервис успешно обработал запрос и вернул ответ")
			.СхемаОтвета("text/plain", СхемаОтвета200)
			.ОтветПоУмолчанию("Любые необработанные исключения")
			.СхемаОтвета("text/plain", СхемаОтветаПоУмолчанию)
КонецПроцедуры

Процедура ОписаниеМетодаПриветМир()
	ОписаниеМетода = "Привет Мир";
	ПолноеОписаниеМетода = "Метод вернет приветственное сообщение человеку, имя которого передано %1";

	СхемаОтветаГет = ДанныеСервиса.НоваяСхема()
		.ТипСтрока()
		.ПростойПример("Привет, Юзернейм из шалблона!")
		.Создать();

	СхемаОтветаПост = ДанныеСервиса.НоваяСхема()
		.ТипСтрока()
		.ПростойПример("Привет, Юзернейм из тела запроса!")
		.Создать();

	СхемаЗапросаГет = ДанныеСервиса.НоваяСхема()
		.ТипСтрока()
		.ПростойПример("John Doe")
		.Создать();

	СхемаЗапросаПост = ДанныеСервиса.НоваяСхема()
		.ТипОбъект()
		.Свойство("name")
			.ТипСвойстваСтрока()
			.ОбязательноеСвойство()
		.Пример()
			.Значение("name", "John Doe")
		.Создать();

	Сервис.Сервис("HelloWorld")
		.Операция(ВидыЗапросов.GET, ОписаниеМетода, СтрШаблон(ПолноеОписаниеМетода, "параметром"), "Продвинутый")
			.Параметр("name", Перечисления.МестоЛокацииПараметра.Шаблон, СхемаЗапросаГет)
			.Ответ("200", "Сервис успешно поздоровался с человеком")
				.СхемаОтвета("text/plain", СхемаОтветаГет)
		.Операция(ВидыЗапросов.POST, ОписаниеМетода, СтрШаблон(ПолноеОписаниеМетода, "в теле запроса"), "Продвинутый")
			.Запрос("Имя конкретного человека", Истина)
				.СхемаЗапроса("application/json", СхемаЗапросаПост)
			.Ответ("200", "Сервис успешно поздоровался с человеком")
				.СхемаОтвета("text/plain", СхемаОтветаПост);
КонецПроцедуры

Процедура ОписаниеМетодаПогода()
	ОписаниеМетода = "Прогноз погоды";
	ПолноеОписаниеМетода = "Метод возвращает погоду, которую мы ему скажем";
	Сервис
		.Сервис("weather")
		.Операция(ВидыЗапросов.GET, ОписаниеМетода, ПолноеОписаниеМетода, "Сложный")
			.Запрос("Надо передать город, погоду и дату", Истина)
			.СхемаЗапроса("application/json", СхемаПогодаЗапрос())
			.СхемаЗапроса("application/xml", СхемаПогодаЗапрос(Истина))
			.Ответ("200", "Запрос успешно обработан")
				.СхемаОтвета("application/json", СхемаПогода())
				.СхемаОтвета("application/x-yml", СхемаПогода())
				.СхемаОтвета("application/xml", СхемаПогода(Истина))
			.Ответ("455", "Город не найден")
			.Ответ("530", "Погоды на указанную дату нет");
КонецПроцедуры
#КонецОбласти

Функция ПолноеОписаниеСервиса()
	Возврат "# Это тестовый сервис для демонстации возможностей uAPI
		|
		|Расширение можно скачать на странице проекта в [гитхаб](https://github.com)
		|
		|Реализована возможность описания тела запроса, тела ответа, параметров и сервера";	
КонецФункции

#Область Схемы
Функция СхемаПогодаЗапрос(ЭтоЗапросXML = Ложь)
	Возврат ДанныеСервиса.НоваяСхема()
		.ТипОбъект()
		.Свойство("City")
			.ТипСвойстваСтрока()
			.ОбязательноеСвойство()
		.Свойство("Date")
			.ТипСвойстваСтрока()
			.ОбязательноеСвойство()
		.Пример()
			.Значение("City", "Almaty")
			.Значение("Date", Формат(Дата(2024, 07, 01), "ДФ=гггг-ММ-дд"))
		.ЭтоXMLСхема(ЭтоЗапросXML, "Weather")
		.Создать();
КонецФункции

Функция СхемаПогода(ЭтоЗапросXML = Ложь)
	Возврат ДанныеСервиса.НоваяСхема()
		.ТипОбъект()
		.Свойство("City")
			.ТипСвойстваСтрока()
			.ОбязательноеСвойство()
		.Свойство("Weather")
			.ТипСвойстваСтрока()
			.ОбязательноеСвойство()
		.Свойство("Date")
			.ТипСвойстваСтрока()
			.ОбязательноеСвойство()
		.Пример()
			.Значение("City", "Almaty")
			.Значение("Weather", "+21")
			.Значение("Date", Формат(Дата(2024, 07, 01), "ДФ=гггг-ММ-дд"))
		.ЭтоXMLСхема(ЭтоЗапросXML, "Weather")
		.Создать();
КонецФункции
#КонецОбласти
#КонецОбласти