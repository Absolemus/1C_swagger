#Область Переменные 
// см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке()   
Перем СведенияОВнешнейОбработке;
// Структура для хранения данных о сервисе
// Заполняется в соответствии с OpenAPI Specification
Перем ГлавныйОбъект; 
// Строка содержащая имя текущего заполняемого сервиса
Перем ИмяСервиса;
// Строка содержащая имя префикса
// Используется для формирования URL сервиса и URL Swagger
// Формат URL: http://localhost/ИмяБазы/hs/uAPI/префикс/имя_сервиса
// Формат URL Swagger: http://localhost/префикс/swagger.json
Перем Префикс;  
// Структура для хранения данных о сервере
// Заполняется в соответствии с OpenAPI Specification
Перем СтруктураСервера;
// Строка содержащая имя текущего заполняемого метода
Перем Метод;
// Строка содержащая код текущего заполняемого ответа
Перем КодОтвета;

// Переменная для хранения поля info в соответствии с OpenAPI Specification
Перем Инфо;
// Переменная для хранения поля servers в соответствии с OpenAPI Specification
Перем Серверы;
// Переменная для хранения поля variables в составе servers в соответствии с OpenAPI Specification
Перем ПеременныеСервера;
// Переменная для хранения поля username в соответствии с OpenAPI Specification
Перем ИменаПользователей;
// Переменная для хранения поля servers в составе port в соответствии с OpenAPI Specification
Перем Порт;
// Переменная для хранения поля servers в составе paths в соответствии с OpenAPI Specification
Перем Пути;
// Переменная для хранения поля requestBody в соответствии с OpenAPI Specification
Перем ТелоЗапроса;
// Переменная для хранения поля responses в соответствии с OpenAPI Specification
Перем Ответы;
// Переменная для хранения поля content в соответствии с OpenAPI Specification
Перем Контент;
#КонецОбласти 

#Область ПрограмныйИнтерфейс
// Функция инициализации сервиса
// Возвращаемое значение:
//  ОбработкаОбъект.ДанныеСервисов - обработка содержащая описание сервиса
// Описание:
// 	Инициализирует переменные "ГлавныйОбъект" и "СведенияОВнешнейОбработке"
Функция Инициализация() Экспорт
	ГлавныйОбъект = Новый Структура;
	ГлавныйОбъект.Вставить("openapi", "3.0.0");
		
	СведенияОВнешнейОбработке = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	СведенияОВнешнейОбработке.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиHTTPСервис(); 
	СведенияОВнешнейОбработке.БезопасныйРежим = Ложь; 

	Инфо = "info";
	Серверы = "servers";
	ПеременныеСервера = "variables";
	ИменаПользователей = "username";
	Порт = "port";
	Пути = "paths";
	ТелоЗапроса = "requestBody";
	Ответы = "responses";
	Контент = "content";
	
	Возврат ЭтотОбъект;
КонецФункции  
#КонецОбласти

#Область СлужебныйПрограмныйИнтерфейс
#Область Информация
// Функция устанавливает информацию о сервисе
// Параметры:
//  Имя - Строка - Название сервиса
// Возвращаемое значение:
//  ОбработкаОбъект.ДанныеСервисов - обработка содержащая описание сервиса
// Описание:
// 	Устанавливает информацию о сервисе в соответствии с OpenAPI Specification
//  Устанавливает имя дополнительной обработки
Функция Имя(Имя) Экспорт	
	ГлавныйОбъект.Вставить(Инфо, Новый Структура("title", Имя));
	СведенияОВнешнейОбработке.Наименование = Имя;
	
	Возврат ЭтотОбъект;
КонецФункции

// Функция устанавливает опиание сервиса
// Параметры:
//  КраткоеОписание - Строка - Краткое описание сервиса
//  ПолноеОписание - Строка - Полное описание сервиса
// Возвращаемое значение:
//  ОбработкаОбъект.ДанныеСервисов - обработка содержащая описание сервиса
// Описание:
// 	Устанавливает описание сервиса в соответствии с OpenAPI Specification
//  Устанавливает описание дополнительной обработки
Функция Описание(КраткоеОписание, ПолноеОписание) Экспорт
	ГлавныйОбъект[Инфо].Вставить("summary", КраткоеОписание);
	ГлавныйОбъект[Инфо].Вставить("description", ПолноеОписание);
	СведенияОВнешнейОбработке.Информация = ПолноеОписание;
	
	Возврат ЭтотОбъект;
КонецФункции

Функция ПолитикаИспользования(Описание) Экспорт
	ГлавныйОбъект[Инфо].Вставить("termsOfService", Описание);
	
	Возврат ЭтотОбъект;
КонецФункции                

// Функция устанавливает версию сервиса
// Параметры:
//  Версия - Строка - Версия сервиса
// Возвращаемое значение:
//  ОбработкаОбъект.ДанныеСервисов - обработка содержащая описание сервиса
// Описание:
// 	Устанавливает версию сервиса в соответствии с OpenAPI Specification
//  Устанавливает версию дополнительной обработки
Функция Версия(Версия) Экспорт
	ГлавныйОбъект[Инфо].Вставить("version", Версия);
	СведенияОВнешнейОбработке.Версия = Версия;
	Возврат ЭтотОбъект;
КонецФункции                

// Функция устанавливает контактную информацию
// Параметры:
//  Имя - Строка - Имя контактного лица
//  Ссылка - Строка - Ссылка на личную страницу контактного лица
//  Почта - Строка - Электронная почта контактного лица
// Возвращаемое значение:
//  ОбработкаОбъект.ДанныеСервисов - обработка содержащая описание сервиса
// Описание:
// 	Устанавливает контактную информацию в соответствии с OpenAPI Specification
Функция Контакт(Имя, Ссылка, Почта) Экспорт
	Контакт = Новый Структура("name, url, email", Имя, Ссылка, Почта);
	ГлавныйОбъект[Инфо].Вставить("contact", Контакт);
	
	Возврат ЭтотОбъект;
КонецФункции

// Функция устанавливает лицензию
// Параметры:
//  Имя - Строка - Название лицензии
//  Идентификатор - Строка - Идентификатор лицензии
//  Ссылка - Строка - Ссылка на текст лицензии
// Возвращаемое значение:
//  ОбработкаОбъект.ДанныеСервисов - обработка содержащая описание сервиса
// Описание:
// 	Устанавливает лицензию в соответствии с OpenAPI Specification
Функция Лицензия(Имя, Идентификатор, Ссылка) Экспорт
	Лицензия = Новый Структура("name, identifier, url", Имя, Идентификатор, Ссылка);
	ГлавныйОбъект[Инфо].Вставить("license", Лицензия);
	
	Возврат ЭтотОбъект;
КонецФункции

// Функция устанавливает префикс
// Параметры:
//  Путь - Строка - Префикс
// Возвращаемое значение:
//  ОбработкаОбъект.ДанныеСервисов - обработка содержащая описание сервиса
// Описание:
//  Префикс используется для формирования URL сервиса и URL Swagger
//  Формат URL: http://localhost/ИмяБазы/hs/uAPI/префикс/имя_сервиса
//  Формат URL Swagger: http://localhost/префикс/swagger.json
//  Метод добавляет команду в дополнительную обработку для получения файла swagger.json
Функция Префикс(Путь) Экспорт
	Префикс = Путь;
	ДобавитьМетодСваггер();
	
	Возврат ЭтотОбъект;
КонецФункции

// Функция устанавливает тэги
// Параметры:
//  Имя - Строка - Наименование тэга
//  Описание - Строка - Полное описание тэга
// Возвращаемое значение:
//  ОбработкаОбъект.ДанныеСервисов - обработка содержащая описание сервиса
// Описание:
// 	Устанавливает тэг и описание в соответствии с OpenAPI Specification
Функция Тэг(Имя, Описание) Экспорт
	Если Не ГлавныйОбъект.Свойство("tags") Тогда
		ГлавныйОбъект.Вставить("tags", Новый Массив);
	КонецЕсли;
	
	ГлавныйОбъект["tags"].Добавить(Новый Структура("name, description", Имя, Описание));
	
	Возврат ЭтотОбъект;
КонецФункции
#КонецОбласти

#Область Серверы
// Функция устанавливает сервер
// Параметры:
//  Путь - Строка - URL сервера
//  Описание - Строка - Описание сервера
// Возвращаемое значение:
//  ОбработкаОбъект.ДанныеСервисов - обработка содержащая описание сервиса
// Описание:
// 	Устанавливает сервер в соответствии с OpenAPI Specification
Функция Сервер(Путь, Описание) Экспорт 
	Если Не ГлавныйОбъект.Свойство(Серверы) Тогда
		ГлавныйОбъект.Вставить(Серверы, Новый Массив);
	КонецЕсли;  
	
	СтруктураСервера = Новый Структура("url, description", Путь, Описание);
	ГлавныйОбъект[Серверы].Добавить(СтруктураСервера);
	
	Возврат ЭтотОбъект;
КонецФункции  

// Функция устанавливает пользователей сервера
// Параметры:
//  Имена - Строка - Имена пользователей сервера указанные через точку с запятой. Например: "user1;user2;user3"
// Возвращаемое значение:
//  ОбработкаОбъект.ДанныеСервисов - обработка содержащая описание сервиса
// Описание:
// 	Устанавливает пользователей сервера в соответствии с OpenAPI Specification
Функция ИменаПользователейСервера(Имена) Экспорт
	Если Не СтруктураСервера.Свойство(ПеременныеСервера) Тогда
		СтруктураСервера.Вставить(ПеременныеСервера, Новый Структура);	 	
	КонецЕсли;
	
	Если Не СтруктураСервера[ПеременныеСервера].Свойство(ИменаПользователей) Тогда
		СтруктураСервера[ПеременныеСервера].Вставить(ИменаПользователей, Новый Структура);
	КонецЕсли; 
	
	СтруктураСервера[ПеременныеСервера][ИменаПользователей].Вставить("enum", СтрРазделить(Имена, ";", Ложь));
	
	Возврат ЭтотОбъект;
КонецФункции      

// Функция устанавливает имя пользователя по умолчанию
// Параметры:
//  Имя - Строка - Имя пользователя по умолчанию
// Возвращаемое значение:
//  ОбработкаОбъект.ДанныеСервисов - обработка содержащая описание сервиса
// Описание:
// 	Устанавливает имя пользователя по умолчанию в соответствии с OpenAPI Specification
//  Имя может дублировать одно из имен указанных в функции ИменаПользователейСервера
Функция ИмяПоУмолчанию(Имя) Экспорт
	Если Не СтруктураСервера.Свойство(ПеременныеСервера) Тогда
		СтруктураСервера.Вставить(ПеременныеСервера, Новый Структура);	 	
	КонецЕсли;
	
	Если Не СтруктураСервера[ПеременныеСервера].Свойство(ИменаПользователей) Тогда
		СтруктураСервера[ПеременныеСервера].Вставить(ИменаПользователей, Новый Структура);
	КонецЕсли; 

	СтруктураСервера[ПеременныеСервера][ИменаПользователей].Вставить("default", Имя);
	
	Возврат ЭтотОбъект;
КонецФункции

// Функция устанавливает порты сервера
// Параметры:
//  Порты - Строка - Порты сервера указанные через точку с запятой. Например: "80;443"
// Возвращаемое значение:
//  ОбработкаОбъект.ДанныеСервисов - обработка содержащая описание сервиса
// Описание:
// 	Устанавливает порты сервера в соответствии с OpenAPI Specification
Функция ПортыСервера(Порты) Экспорт
	Если Не СтруктураСервера.Свойство(ПеременныеСервера) Тогда
		СтруктураСервера.Вставить(ПеременныеСервера, Новый Структура);	 	
	КонецЕсли;

	Если Не СтруктураСервера[ПеременныеСервера].Свойство(Порт) Тогда
		СтруктураСервера[ПеременныеСервера].Вставить(Порт, Новый Структура);
	КонецЕсли;     
	
	СтруктураСервера[ПеременныеСервера][Порт].Вставить("enum", СтрРазделить(Порты, ";", Ложь));
	
	Возврат ЭтотОбъект;
КонецФункции  

// Функция устанавливает порт по умолчанию
// Параметры:
//  ПортПоУмолчанию - Строка - Порт по умолчанию
// Возвращаемое значение:
//  ОбработкаОбъект.ДанныеСервисов - обработка содержащая описание сервиса
// Описание:
// 	Устанавливает порт по умолчанию в соответствии с OpenAPI Specification
//  Порт может дублировать один из портов указанных в функции ПортыСервера
Функция ПортПоУмолчанию(ПортПоУмолчанию) Экспорт
	Если Не СтруктураСервера.Свойство(ПеременныеСервера) Тогда
		СтруктураСервера.Вставить(ПеременныеСервера, Новый Структура);	 	
	КонецЕсли;

	Если Не СтруктураСервера[ПеременныеСервера].Свойство(Порт) Тогда
		СтруктураСервера[ПеременныеСервера].Вставить(Порт, Новый Структура);
	КонецЕсли;     

	СтруктураСервера[ПеременныеСервера][Порт].Вставить("default", ПортПоУмолчанию);	 
	
	Возврат ЭтотОбъект;
КонецФункции           
#КонецОбласти 

#Область Сервисы    
// Функция устанавливает сервис
// Параметры:
//  Имя - Строка - Имя сервиса
//  Представление - Строка - Краткое описание сервиса
//  ПолноеОписание - Строка - Полное описание сервиса
// Возвращаемое значение:
//  ОбработкаОбъект.ДанныеСервисов - обработка содержащая описание сервиса
// Описание:
// 	Устанавливает сервис в соответствии с OpenAPI Specification
//  Устанавливает имя сервиса в формате URL для дальнейшего использования                                         
Функция Сервис(Имя) Экспорт
	Если Не ГлавныйОбъект.Свойство(Пути) Тогда
		ГлавныйОбъект.Вставить(Пути, Новый Соответствие);	
	КонецЕсли;
	
	ИмяСервиса = Имя;
	ГлавныйОбъект[Пути].Вставить(СтрШаблон("/%1", ИмяСервиса), Новый Структура);
		
	Возврат ЭтотОбъект;
КонецФункции

// Функция устанавливает метод сервиса
// Параметры:
//  ТипОперации - ПеречислениеСсылка.ВидыМетодовHTTPЗапроса - Тип операции (GET, POST, PUT, DELETE, etc.)
//  КраткоеОписание - Строка - Краткое описание метода
//  ПолноеОписание - Строка - Полное описание метода
//  Тэги - Строка - Тэги добавленные ранее, если надо передать несколько тэгов, 
//					можно передать их строкой разделив символом ";" ("tag1;tag2;tag3")
// Возвращаемое значение:
//  ОбработкаОбъект.ДанныеСервисов - обработка содержащая описание сервиса
// Описание:
// 	Устанавливает метод сервиса в соответствии с OpenAPI Specification
//  Добавляет команду в дополнительную обработку для вызова HTTP сервиса
//  Идентификатором команды является имя сервиса, идентификатор передается в дополнительную обработку
//  первым параметром в метод ВыполнитьКоманду(Идентификатор, ПараметрыВыполнения)
//  По этому идетификатору следует определить какой метод вызвать
Функция Операция(ТипОперации, КраткоеОписание = "", ПолноеОписание = "", Тэги = "") Экспорт
	Метод = Перечисления.ВидыМетодовHTTPЗапроса.ТипМетода(ТипОперации);     
	
	СтруктураОперации = Новый Структура;
	СтруктураОперации.Вставить("summary", КраткоеОписание);
	СтруктураОперации.Вставить("description", ПолноеОписание);
	СтруктураОперации.Вставить("operationId", СтрШаблон("%1_%2", ИмяСервиса, Метод)); 
	Если ЗначениеЗаполнено(Тэги) Тогда
		СтруктураОперации.Вставить("tags", СтрРазделить(Тэги, ";"));
	КонецЕсли;
	ГлавныйОбъект[Пути][СтрШаблон("/%1", ИмяСервиса)].Вставить(Метод, СтруктураОперации);
	
	Представление = СтрШаблон("%1 (%2)", ГлавныйОбъект[Пути][СтрШаблон("/%1", ИмяСервиса)][Метод]["summary"], Метод);
	МетодОбработки = СведенияОВнешнейОбработке.Команды.Добавить();
	МетодОбработки.Представление = Представление;	
	МетодОбработки.Идентификатор = ИмяСервиса;	
	МетодОбработки.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовHTTPСервиса();
	МетодОбработки.ПоказыватьОповещение = Ложь;	
	МетодОбработки.Метод = ТипОперации;	     
	МетодОбработки.Префикс = Префикс;
		
	Возврат ЭтотОбъект;
КонецФункции

// Функция устанавливает параметр метода
// Параметры:
//  Имя - Строка - Имя параметра
//  Локация - ПеречислениеСсылка.МестоЛокацииПараметра - Локация параметра (query, header, path, cookie)
//			ПеречислениеСсылка.МестоЛокацииПараметра.ТелоЗапроса - query - параметр запроса
//			ПеречислениеСсылка.МестоЛокацииПараметра.Заголовок - header - заголовок запроса
//			ПеречислениеСсылка.МестоЛокацииПараметра.Путь - path - часть пути запроса
//			ПеречислениеСсылка.МестоЛокацииПараметра.Куки - cookie - куки запроса
//  Схема - Структура, Соответствие - Схема параметра в соответствии с OpenAPI Specification
// Возвращаемое значение:
//  ОбработкаОбъект.ДанныеСервисов - обработка содержащая описание сервиса
// Описание:
// 	Устанавливает параметр метода в соответствии с OpenAPI Specification
Функция Параметр(Имя, Локация, Схема) Экспорт 
	Если Не ГлавныйОбъект[Пути][СтрШаблон("/%1", ИмяСервиса)][Метод].Свойство("parameters") Тогда
		ГлавныйОбъект[Пути][СтрШаблон("/%1", ИмяСервиса)][Метод].Вставить("parameters", Новый Массив);	
	КонецЕсли;
	СтруктураПараметра = Новый Структура;
	СтруктураПараметра.Вставить("name", Имя);
	СтруктураПараметра.Вставить("in", Перечисления.МестоЛокацииПараметра.МестоЛокации(Локация)); 
	СтруктураПараметра.Вставить("explode", Истина);
	СтруктураПараметра.Вставить("schema", Схема);
	
	ГлавныйОбъект[Пути][СтрШаблон("/%1", ИмяСервиса)][Метод]["parameters"].Добавить(СтруктураПараметра);
	
	// TO DO 
	// Добавить возможностей параметров
	
	Возврат ЭтотОбъект;
КонецФункции

// Функция устанавливает тело запроса метода
// Параметры:
//  Описание - Строка - Описание запроса
//  Обязательный - Булево - Обязательность запроса (по умолчанию Ложь)
// Возвращаемое значение:
//  ОбработкаОбъект.ДанныеСервисов - обработка содержащая описание сервиса
// Описание:
// 	Описывает тело запроса метода в соответствии с OpenAPI Specification
Функция Запрос(Описание, Обязательный = Ложь) Экспорт
	ОписаниеТелаЗапроса = Новый Структура("description, required", Описание, Обязательный);
	ГлавныйОбъект[Пути][СтрШаблон("/%1", ИмяСервиса)][Метод].Вставить(ТелоЗапроса, ОписаниеТелаЗапроса);
	
	Возврат ЭтотОбъект;
КонецФункции   

// Функция устанавливает схему запроса метода
// Параметры:
//  ТипКонтента - Строка - Тип контента запроса (application/json, application/xml, etc.)
//  Схема - Структура, Соответствие - Схема запроса в соответствии с OpenAPI Specification
// Возвращаемое значение:
//  ОбработкаОбъект.ДанныеСервисов - обработка содержащая описание сервиса
// Описание:
// 	Устанавливает схему запроса метода в соответствии с OpenAPI Specification
Функция СхемаЗапроса(ТипКонтента, Схема) Экспорт
	Если Не ГлавныйОбъект[Пути][СтрШаблон("/%1", ИмяСервиса)][Метод][ТелоЗапроса].Свойство(Контент) Тогда
		ГлавныйОбъект[Пути][СтрШаблон("/%1", ИмяСервиса)][Метод][ТелоЗапроса].Вставить(Контент, Новый Соответствие);			
	КонецЕсли;
	
	ОписаниеКонтента = Новый Структура;
	ОписаниеКонтента.Вставить("schema", Схема);
		
	ГлавныйОбъект[Пути][СтрШаблон("/%1", ИмяСервиса)][Метод][ТелоЗапроса][Контент].Вставить(ТипКонтента, ОписаниеКонтента);
	
	Возврат ЭтотОбъект;
КонецФункции

// Функция устанавливает ответы метода
// Параметры:
//  Код - Строка - Код ответа (200, 400, 404, etc.)
//  Описание - Строка - Описание ответа
// Возвращаемое значение:
//  ОбработкаОбъект.ДанныеСервисов - обработка содержащая описание сервиса
// Описание:
// 	Устанавливает ответы метода в соответствии с OpenAPI Specification
Функция Ответ(Код, Описание) Экспорт
	КодОтвета = Код;
	Если Не ГлавныйОбъект[Пути][СтрШаблон("/%1", ИмяСервиса)][Метод].Свойство(Ответы) Тогда
		ГлавныйОбъект[Пути][СтрШаблон("/%1", ИмяСервиса)][Метод].Вставить(Ответы, Новый Соответствие);
	КонецЕсли;
	ГлавныйОбъект[Пути][СтрШаблон("/%1", ИмяСервиса)][Метод][Ответы].Вставить(КодОтвета, Новый Структура("description", Описание));
	
	Возврат ЭтотОбъект;	
КонецФункции           

// Функция устанавливает ответ по умолчанию
// Параметры:
//  Описание - Строка - Описание ответа по умолчанию
// Возвращаемое значение:
//  ОбработкаОбъект.ДанныеСервисов - обработка содержащая описание сервиса
// Описание:
// 	Устанавливает ответ по умолчанию метода в соответствии с OpenAPI Specification
//  Следует использовать для описания необработанных ошибок или стандартных ответов при падении сервиса
Функция ОтветПоУмолчанию(Описание) Экспорт
	КодОтвета = "default";
	Если Не ГлавныйОбъект[Пути][СтрШаблон("/%1", ИмяСервиса)][Метод].Свойство(Ответы) Тогда
		ГлавныйОбъект[Пути][СтрШаблон("/%1", ИмяСервиса)][Метод].Вставить(Ответы, Новый Соответствие);
	КонецЕсли;
	ГлавныйОбъект[Пути][СтрШаблон("/%1", ИмяСервиса)][Метод][Ответы].Вставить("default", Новый Структура("description", Описание));
	
	Возврат ЭтотОбъект;
КонецФункции

// Функция устанавливает схему ответа метода
// Параметры:
//  ТипКонтента - Строка - Тип контента ответа (application/json, application/xml, etc.)
//  Схема - Структура, Соответствие - Схема ответа в соответствии с OpenAPI Specification
// Возвращаемое значение:
//  ОбработкаОбъект.ДанныеСервисов - обработка содержащая описание сервиса
// Описание:
// 	Устанавливает схему ответа метода в соответствии с OpenAPI Specification
Функция СхемаОтвета(ТипКонтента, Схема) Экспорт
	Если Не ГлавныйОбъект[Пути][СтрШаблон("/%1", ИмяСервиса)][Метод][Ответы][КодОтвета].Свойство(Контент) Тогда
		ГлавныйОбъект[Пути][СтрШаблон("/%1", ИмяСервиса)][Метод][Ответы][КодОтвета].Вставить(Контент, Новый Соответствие);
	КонецЕсли;
	
	ОписаниеКонтента = Новый Структура;
	ОписаниеКонтента.Вставить("schema", Схема);
		
	ГлавныйОбъект[Пути][СтрШаблон("/%1", ИмяСервиса)][Метод][Ответы][КодОтвета][Контент].Вставить(ТипКонтента, ОписаниеКонтента);
	
	Возврат ЭтотОбъект;	
КонецФункции 

// Функция устанавливает пример ответа метода
// Параметры:
//  Пример - Структура, Соответствие - Пример ответа в соответствии с OpenAPI Specification
// Возвращаемое значение:
//  ОбработкаОбъект.ДанныеСервисов - обработка содержащая описание сервиса
// Описание:
// 	Устанавливает пример ответа метода в соответствии с OpenAPI Specification
Функция ПримерОтвета(Пример) Экспорт
	ГлавныйОбъект[Пути][СтрШаблон("/%1", ИмяСервиса)][Метод][Ответы][КодОтвета][Контент].Вставить("example", Пример);
	
	Возврат ЭтотОбъект;
КонецФункции
#КонецОбласти

Функция Создать() Экспорт
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, ГлавныйОбъект);
	ТекстJSON = Запись.Закрыть();
	
	Возврат Новый Структура("ОписаниеСервиса, СведенияОВнешнейОбработке", ТекстJSON, СведенияОВнешнейОбработке);
КонецФункции
#КонецОбласти      

#Область СлужебныеПроцедурыИФункции
Процедура ДобавитьМетодСваггер()
	НовыйМетод = СведенияОВнешнейОбработке.Команды.Добавить();
	НовыйМетод.Представление = "swagger";	
	НовыйМетод.Идентификатор = "/swagger.json";	
	НовыйМетод.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовHTTPСервиса();
	НовыйМетод.ПоказыватьОповещение = Ложь;	
	НовыйМетод.Метод = Перечисления.ВидыМетодовHTTPЗапроса.GET;
	НовыйМетод.Скрыть = Истина;
	НовыйМетод.Префикс = Префикс;	
КонецПроцедуры
#КонецОбласти