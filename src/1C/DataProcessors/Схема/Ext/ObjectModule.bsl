#Область Переменные
// Схема - Соответствие - Схема JSON
Перем Схема;
// Свойство - Строка - Имя свойства
Перем Свойство;
// ПолеСвойство - Строка - Имя поля свойств
Перем ПолеСвойство;
#КонецОбласти

#Область ПрограммныйИнтерфейс
// Функция Инициализация
// Возвращаемое значение:
//  ОбработкаОбъект.Схема - обработка, содержащая схему JSON
// Описание:
//  Функция инициализирует схему JSON
Функция Инициализация() Экспорт
	Схема = Новый Соответствие;

	ПолеСвойство = "properties";

	Возврат ЭтотОбъект;
КонецФункции
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Функция ТипОбъект
// Возвращаемое значение:
//  ОбработкаОбъект.Схема - обработка, содержащая схему JSON
// Описание:
//  Функция устанавливает тип объекта
Функция ТипОбъект() Экспорт
	Схема.Вставить("type", "object");

	Возврат ЭтотОбъект;
КонецФункции

// Функция ТипМассив
// Возвращаемое значение:
//  ОбработкаОбъект.Схема - обработка, содержащая схему JSON
// Описание:
//  Функция устанавливает тип массива
Функция ТипМассив() Экспорт
	Схема.Вставить("type", "array");

	Возврат ЭтотОбъект;
КонецФункции

// Функция ТипСтрока
// Возвращаемое значение:
//  ОбработкаОбъект.Схема - обработка, содержащая схему JSON
// Описание:
//  Функция устанавливает тип строки
Функция ТипСтрока() Экспорт
	Схема.Вставить("type", "string");

	Возврат ЭтотОбъект;
КонецФункции

// Функция ТипЧисло
// Возвращаемое значение:
//  ОбработкаОбъект.Схема - обработка, содержащая схему JSON
// Описание:
//  Функция устанавливает тип числа
Функция ТипЧисло() Экспорт
	Схема.Вставить("type", "integer");

	Возврат ЭтотОбъект;
КонецФункции

// Функция ТипЛогическое
// Возвращаемое значение:
//  ОбработкаОбъект.Схема - обработка, содержащая схему JSON
// Описание:
//  Функция устанавливает тип логического значения
Функция ТипЛогическое() Экспорт
	Схема.Вставить("type", "boolean");

	Возврат ЭтотОбъект;
КонецФункции

// Функция Свойство(Имя)
// Параметры:
//  Имя - Строка - Имя свойства
// Возвращаемое значение:
//  ОбработкаОбъект.Схема - обработка, содержащая схему JSON
// Описание:
//  Функция добавляет в схему свойство с указанным именем
Функция Свойство(Имя) Экспорт
	// Проверяем, если свойство property не существует, то создаем его
	Если Схема[ПолеСвойство] = Неопределено Тогда
		Схема.Вставить(ПолеСвойство, Новый Соответствие);
	КонецЕсли;
	Свойство = Имя;

	Схема[ПолеСвойство].Вставить(Имя, Новый Соответствие);	

	Возврат ЭтотОбъект;
КонецФункции

// Функция ТипСвойстваСтрока
// Возвращаемое значение:
//  ОбработкаОбъект.Схема - обработка, содержащая схему JSON
// Описание:
//  Функция устанавливает тип свойства строки
Функция ТипСвойстваСтрока() Экспорт
	Схема[ПолеСвойство][Свойство].Вставить("type", "string");

	Возврат ЭтотОбъект;
КонецФункции

// Функция ТипСвойстваЧисло
// Возвращаемое значение:
//  ОбработкаОбъект.Схема - обработка, содержащая схему JSON
// Описание:
//  Функция устанавливает тип свойства числа
Функция ТипСвойстваЧисло() Экспорт
	Схема[ПолеСвойство][Свойство].Вставить("type", "integer");

	Возврат ЭтотОбъект;
КонецФункции

// Функция ТипСвойстваЛогическое
// Возвращаемое значение:
//  ОбработкаОбъект.Схема - обработка, содержащая схему JSON
// Описание:
//  Функция устанавливает тип свойства логического значения
Функция ТипСвойстваЛогическое() Экспорт
	Схема[ПолеСвойство][Свойство].Вставить("type", "boolean");

	Возврат ЭтотОбъект;
КонецФункции

// Функция ТипСтвойстваМассив
// Возвращаемое значение:
//  ОбработкаОбъект.Схема - обработка, содержащая схему JSON
// Описание:
//  Функция устанавливает тип свойства массив
Функция ТипСтвойстваМассив() Экспорт
	Схема[ПолеСвойство][Свойство].Вставить("type", "array");

	Возврат ЭтотОбъект;
КонецФункции

// Функция ОбязательноеСвойство
// Возвращаемое значение:
//  ОбработкаОбъект.Схема - обработка, содержащая схему JSON
// Описание:
//  Функция устанавливает свойство как обязательное
Функция ОбязательноеСвойство() Экспорт
	ПолеОбязательноеСвойство = "required";
	// Проверяем, если свойство required не существует, то создаем его
	Если Схема[ПолеОбязательноеСвойство] = Неопределено Тогда
		Схема.Вставить(ПолеОбязательноеСвойство, Новый Массив);
	КонецЕсли;
	Схема[ПолеОбязательноеСвойство].Добавить(Свойство);

	Возврат ЭтотОбъект;
КонецФункции

// Функция СхемаИмя
// Параметры:
//  ЭтоXMLСхема - Булево - Признак того, что схема является XML
//  ИмяОбертки - Строка - Имя обертки
// Возвращаемое значение:
//  ОбработкаОбъект.Схема - обработка, содержащая схему JSON
// Описание:
//  Функция создает обертку для схемы XML, 
//  в качестве корневого объекта указывается имя обертки
// BSLLS:LatinAndCyrillicSymbolInWord-off
Функция ЭтоXMLСхема(ЭтоXMLСхема, ИмяОбертки) Экспорт
	Схема.Вставить("xml", Новый Структура("name, wrapped", ИмяОбертки, Истина));

	Возврат ЭтотОбъект;
КонецФункции
// BSLLS:LatinAndCyrillicSymbolInWord-on

Функция ПростойПример(Значение) Экспорт
	Схема.Вставить("example", Значение);

	Возврат ЭтотОбъект;
КонецФункции

Функция Пример() Экспорт
	Схема.Вставить("example", Новый Структура);

	Возврат ЭтотОбъект;
КонецФункции

Функция Значение(Имя, Значение) Экспорт
	Схема["example"].Вставить(Имя, Значение);

	Возврат ЭтотОбъект;
КонецФункции

Функция Создать() Экспорт
	Возврат Схема;
КонецФункции
#КонецОбласти