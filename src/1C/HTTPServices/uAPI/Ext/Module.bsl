#Область Сервисы
Функция Прокси(HTTPЗапрос)  
		
	ЧастиЗапроса = СтрРазделить(HTTPЗапрос.ОтносительныйURL, "/", Ложь);
	ПоследняяЧастьЗапроса = ЧастиЗапроса.Получить(ЧастиЗапроса.ВГраница());
	ЭтоЗапросСваггер = ПоследняяЧастьЗапроса = "swagger";
	ЭтоЗапросДокументации = ПоследняяЧастьЗапроса = "swagger.json";	
	
	Если ЭтоЗапросСваггер Тогда
		Возврат Сваггер(HTTPЗапрос);
	Иначе
		Возврат Сервис(HTTPЗапрос, ЭтоЗапросДокументации);
	КонецЕсли;
		
	
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция Сваггер(HTTPЗапрос)
	Домен = Константы.Домен.Получить();
	Запрос = Новый Запрос; 
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеОтчетыИОбработкиКоманды.Ссылка.Представление КАК title,
	               |	Домен.Значение + ДополнительныеОтчетыИОбработкиКоманды.Префикс + ""/swagger.json"" КАК config_url,
	               |	""/"" + ДополнительныеОтчетыИОбработкиКоманды.Префикс КАК url_prefix
	               |ИЗ
	               |	Справочник.ДополнительныеОтчетыИОбработки.Команды КАК ДополнительныеОтчетыИОбработкиКоманды,
	               |	Константа.Домен КАК Домен
	               |ГДЕ
	               |	ИСТИНА
	               |	И ДополнительныеОтчетыИОбработкиКоманды.ВариантЗапуска = &ВариантЗапуска"; 
	
	Запрос.Параметры.Вставить("ВариантЗапуска", Перечисления.СпособыВызоваДополнительныхОбработок.ВызовHTTPСервиса);
	Результат = Запрос.Выполнить(); 

	Данные = Результат.Выгрузить();
	Данные.Свернуть("title, config_url, url_prefix"); 
	
	МассивДанных = Новый Массив;
	НоваяСтрока = Новый Структура("title, config_url, url_prefix");
	Для Каждого Строка Из Данные Цикл
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		МассивДанных.Добавить(НоваяСтрока);	
	КонецЦикла;
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, МассивДанных);
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки(Запись.Закрыть());
	Возврат Ответ;
КонецФункции

Функция Сервис(HTTPЗапрос, ЭтоЗапросДокументации)
	Запрос = Новый Запрос; 
	Запрос.Текст = "ВЫБРАТЬ
	               |	Команды.Идентификатор КАК Идентификатор,
	               |	Команды.Метод КАК Метод,
	               |	Команды.Ссылка КАК Ссылка,
	               |	Команды.Ссылка.Представление КАК Представление
	               |ИЗ
	               |	Справочник.ДополнительныеОтчетыИОбработки.Команды КАК Команды
	               |ГДЕ
	               |	ИСТИНА
	               |	И ""/"" + Команды.Префикс + Команды.Идентификатор = &Идентификатор
	               |	И Команды.Метод = &Метод
	               |	И Команды.ВариантЗапуска = &ВариантЗапуска"; 
	
	Запрос.Параметры.Вставить("Идентификатор", HTTPЗапрос.ОтносительныйURL);
	Запрос.Параметры.Вставить("Метод", HTTPЗапрос.HTTPМетод);
	Запрос.Параметры.Вставить("ВариантЗапуска", Перечисления.СпособыВызоваДополнительныхОбработок.ВызовHTTPСервиса);
	Результат = Запрос.Выполнить(); 
	
	Если Результат.Пустой() Тогда 
		Возврат Новый HTTPСервисОтвет(404);				
	КонецЕсли;
	Выборка = Результат.Выбрать(); 
	Выборка.Следующий();
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("HTTPЗапрос", HTTPЗапрос);
	ПараметрыКоманды.Вставить("Метод", Выборка.Метод);
	ПараметрыКоманды.Вставить("ДополнительнаяОбработкаСсылка", Выборка.Ссылка);
	ПараметрыКоманды.Вставить("ИдентификаторКоманды", Выборка.Идентификатор);   
	ПараметрыКоманды.Вставить("ЭтоЗапросДокументации", ЭтоЗапросДокументации);   
	
	Возврат ДополнительныеОтчетыИОбработки.ВыполнитьКоманду(ПараметрыКоманды).HTTPОтвет;   	
КонецФункции
#КонецОбласти